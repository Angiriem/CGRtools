#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  rdfrw.py
#
#  Copyright 2014 Ramil Nugmanov <stsouko@live.ru>
#  This file is part of condenser.
#
#  condenser is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

import numpy
from math import ceil


def main():
    print "This file is part of condenser."
    return 0


class SDFwrite(object):
    def __init__(self, fileTowrite, coordtype, fformat): #инициализация
        self.__coordtype = coordtype
        self.__fileTowrite = open(fileTowrite, 'w')
        self.__format = fformat

    def close(self):
        self.__fileTowrite.close()

    def writedata(self, data):
        self.__atoms = data['maps']
        self.__fileTowrite.write(
            "\n  SDF generated by condenser. (c) Ramil I. Nugmanov\n\n%3s%3s  0  0  0  0            999 V2000\n" % (
                len(data['maps']), len(data['diff'])))

        for i, j in zip(data['maps'], data['products_maps']): #перебираем построчно исходный файл
            if self.__coordtype == 2:
                i['x2'], i['y2'], i['z2'] = j['x'], j['y'], j['z']
                self.__fileTowrite.write(
                    "%(x2)10.4f%(y2)10.4f%(z2)10.4f %(element)-3s%(izotop)2s%(charge)3s  0  0  0  0  0%(mark)3s  0%(map)3s  0  0\n" % i)
            else:
                self.__fileTowrite.write(
                    "%(x)10.4f%(y)10.4f%(z)10.4f %(element)-3s%(izotop)2s%(charge)3s  0  0  0  0  0%(mark)3s  0%(map)3s  0  0\n" % i)
        for i in data['diff']:
            self.__fileTowrite.write("%3d%3d%3s  0  0  0  0\n" % i)

        cgrblock = data['dynbonds'] + data['stereo'] + data['dyncharges']
            #[(3, 5, 'N>P', 'dynbondstereo'), (4, 6, 'N>E', 'dynbondstereo'), (16, 'U>N', 'dynatomstereo')]
        for j in xrange(1000):
            sty = cgrblock[j * 8:j * 8 + 8]
            if sty:
                stydat = ' '.join(['%3d DAT' % (x + 1 + j * 8) for x in range(len(sty))])
                self.__fileTowrite.write('M  STY  %d %s\n' % (len(sty), stydat))
            else:
                break
        for i, j in enumerate(cgrblock):
            cx, cy = self.__getposition(j[:-2])
            self.__fileTowrite.write('M  SAL %3d%3d %s\n' % (i + 1, len(j) - 2, ' '.join(['%3d' % x for x in j[:-2]])))
            self.__fileTowrite.write('M  SDT %3d %s\n' % (i + 1, j[-1]))
            self.__fileTowrite.write('M  SDD %3d %10.4f%10.4f    DAU   ALL  0       0\n' % (i + 1, cx, cy))
            self.__fileTowrite.write('M  SED %3d %s\n' % (i + 1, j[-2]))

        self.__fileTowrite.write("M  END\n")
        for i in data['meta'].items():
            self.__fileTowrite.write(">  <%s>\n%s\n" % i)
        self.__fileTowrite.write("$$$$\n")

    def __getposition(self, inp):
        cord = []
        for i in inp:
            cord.append(self.__atoms[i - 1])
        if len(cord) > 1:
            x = (cord[-1]['x'] + cord[0]['x']) / 2 + .2
            y = (cord[-1]['y'] + cord[0]['y']) / 2
            dy = cord[-1]['y'] - cord[0]['y']
            dx = cord[-1]['x'] - cord[0]['x']
            if dx > 0:
                if dy > 0:
                    y -= .2
                else:
                    y += .2
            elif dx < 0:
                if dy < 0:
                    y -= .2
                else:
                    y += .2
        else:
            x, y = cord[0]['x'] + .25, cord[0]['y']

        return x, y


if __name__ == '__main__':
    main()
